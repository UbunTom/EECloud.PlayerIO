// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DatabaseObject.proto

#ifndef PROTOBUF_DatabaseObject_2eproto__INCLUDED
#define PROTOBUF_DatabaseObject_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "KeyValuePair.pb.h"
// @@protoc_insertion_point(includes)

namespace EECloud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DatabaseObject_2eproto();
void protobuf_AssignDesc_DatabaseObject_2eproto();
void protobuf_ShutdownFile_DatabaseObject_2eproto();

class DatabaseObject;

// ===================================================================

class DatabaseObject : public ::google::protobuf::Message {
 public:
  DatabaseObject();
  virtual ~DatabaseObject();
  
  DatabaseObject(const DatabaseObject& from);
  
  inline DatabaseObject& operator=(const DatabaseObject& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DatabaseObject& default_instance();
  
  void Swap(DatabaseObject* other);
  
  // implements Message ----------------------------------------------
  
  DatabaseObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatabaseObject& from);
  void MergeFrom(const DatabaseObject& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  
  // optional string Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // repeated .EECloud.KeyValuePairSD Properties = 3;
  inline int properties_size() const;
  inline void clear_properties();
  static const int kPropertiesFieldNumber = 3;
  inline const ::EECloud::KeyValuePairSD& properties(int index) const;
  inline ::EECloud::KeyValuePairSD* mutable_properties(int index);
  inline ::EECloud::KeyValuePairSD* add_properties();
  inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePairSD >&
      properties() const;
  inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePairSD >*
      mutable_properties();
  
  // optional string Table = 9;
  inline bool has_table() const;
  inline void clear_table();
  static const int kTableFieldNumber = 9;
  inline const ::std::string& table() const;
  inline void set_table(const ::std::string& value);
  inline void set_table(const char* value);
  inline void set_table(const char* value, size_t size);
  inline ::std::string* mutable_table();
  inline ::std::string* release_table();
  
  // @@protoc_insertion_point(class_scope:EECloud.DatabaseObject)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_table();
  inline void clear_has_table();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* key_;
  ::std::string* version_;
  ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePairSD > properties_;
  ::std::string* table_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_DatabaseObject_2eproto();
  friend void protobuf_AssignDesc_DatabaseObject_2eproto();
  friend void protobuf_ShutdownFile_DatabaseObject_2eproto();
  
  void InitAsDefaultInstance();
  static DatabaseObject* default_instance_;
};
// ===================================================================


// ===================================================================

// DatabaseObject

// optional string Key = 1;
inline bool DatabaseObject::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatabaseObject::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatabaseObject::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatabaseObject::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& DatabaseObject::key() const {
  return *key_;
}
inline void DatabaseObject::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DatabaseObject::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DatabaseObject::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatabaseObject::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* DatabaseObject::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Version = 2;
inline bool DatabaseObject::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatabaseObject::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatabaseObject::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatabaseObject::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& DatabaseObject::version() const {
  return *version_;
}
inline void DatabaseObject::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void DatabaseObject::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void DatabaseObject::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatabaseObject::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* DatabaseObject::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .EECloud.KeyValuePairSD Properties = 3;
inline int DatabaseObject::properties_size() const {
  return properties_.size();
}
inline void DatabaseObject::clear_properties() {
  properties_.Clear();
}
inline const ::EECloud::KeyValuePairSD& DatabaseObject::properties(int index) const {
  return properties_.Get(index);
}
inline ::EECloud::KeyValuePairSD* DatabaseObject::mutable_properties(int index) {
  return properties_.Mutable(index);
}
inline ::EECloud::KeyValuePairSD* DatabaseObject::add_properties() {
  return properties_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePairSD >&
DatabaseObject::properties() const {
  return properties_;
}
inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePairSD >*
DatabaseObject::mutable_properties() {
  return &properties_;
}

// optional string Table = 9;
inline bool DatabaseObject::has_table() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatabaseObject::set_has_table() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatabaseObject::clear_has_table() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatabaseObject::clear_table() {
  if (table_ != &::google::protobuf::internal::kEmptyString) {
    table_->clear();
  }
  clear_has_table();
}
inline const ::std::string& DatabaseObject::table() const {
  return *table_;
}
inline void DatabaseObject::set_table(const ::std::string& value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void DatabaseObject::set_table(const char* value) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(value);
}
inline void DatabaseObject::set_table(const char* value, size_t size) {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  table_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatabaseObject::mutable_table() {
  set_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    table_ = new ::std::string;
  }
  return table_;
}
inline ::std::string* DatabaseObject::release_table() {
  clear_has_table();
  if (table_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_;
    table_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DatabaseObject_2eproto__INCLUDED
