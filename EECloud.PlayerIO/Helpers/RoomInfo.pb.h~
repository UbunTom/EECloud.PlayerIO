// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoomInfo.proto

#ifndef PROTOBUF_RoomInfo_2eproto__INCLUDED
#define PROTOBUF_RoomInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "KeyValuePair.pb.h"
// @@protoc_insertion_point(includes)

namespace EECloud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RoomInfo_2eproto();
void protobuf_AssignDesc_RoomInfo_2eproto();
void protobuf_ShutdownFile_RoomInfo_2eproto();

class RoomInfo;

// ===================================================================

class RoomInfo : public ::google::protobuf::Message {
 public:
  RoomInfo();
  virtual ~RoomInfo();
  
  RoomInfo(const RoomInfo& from);
  
  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfo& default_instance();
  
  void Swap(RoomInfo* other);
  
  // implements Message ----------------------------------------------
  
  RoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomInfo& from);
  void MergeFrom(const RoomInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional string RoomType = 2;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 2;
  inline const ::std::string& roomtype() const;
  inline void set_roomtype(const ::std::string& value);
  inline void set_roomtype(const char* value);
  inline void set_roomtype(const char* value, size_t size);
  inline ::std::string* mutable_roomtype();
  inline ::std::string* release_roomtype();
  
  // optional int32 OnlineUsers = 3;
  inline bool has_onlineusers() const;
  inline void clear_onlineusers();
  static const int kOnlineUsersFieldNumber = 3;
  inline ::google::protobuf::int32 onlineusers() const;
  inline void set_onlineusers(::google::protobuf::int32 value);
  
  // repeated .EECloud.KeyValuePair RoomData = 4;
  inline int roomdata_size() const;
  inline void clear_roomdata();
  static const int kRoomDataFieldNumber = 4;
  inline const ::EECloud::KeyValuePair& roomdata(int index) const;
  inline ::EECloud::KeyValuePair* mutable_roomdata(int index);
  inline ::EECloud::KeyValuePair* add_roomdata();
  inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >&
      roomdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >*
      mutable_roomdata();
  
  // @@protoc_insertion_point(class_scope:EECloud.RoomInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_onlineusers();
  inline void clear_has_onlineusers();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* roomtype_;
  ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair > roomdata_;
  ::google::protobuf::int32 onlineusers_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_RoomInfo_2eproto();
  friend void protobuf_AssignDesc_RoomInfo_2eproto();
  friend void protobuf_ShutdownFile_RoomInfo_2eproto();
  
  void InitAsDefaultInstance();
  static RoomInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// RoomInfo

// optional string Id = 1;
inline bool RoomInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomInfo::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RoomInfo::id() const {
  return *id_;
}
inline void RoomInfo::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RoomInfo::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RoomInfo::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomInfo::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RoomInfo::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string RoomType = 2;
inline bool RoomInfo::has_roomtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomInfo::set_has_roomtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomInfo::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomInfo::clear_roomtype() {
  if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
    roomtype_->clear();
  }
  clear_has_roomtype();
}
inline const ::std::string& RoomInfo::roomtype() const {
  return *roomtype_;
}
inline void RoomInfo::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
}
inline void RoomInfo::set_roomtype(const char* value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
}
inline void RoomInfo::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomInfo::mutable_roomtype() {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  return roomtype_;
}
inline ::std::string* RoomInfo::release_roomtype() {
  clear_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomtype_;
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 OnlineUsers = 3;
inline bool RoomInfo::has_onlineusers() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomInfo::set_has_onlineusers() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomInfo::clear_has_onlineusers() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomInfo::clear_onlineusers() {
  onlineusers_ = 0;
  clear_has_onlineusers();
}
inline ::google::protobuf::int32 RoomInfo::onlineusers() const {
  return onlineusers_;
}
inline void RoomInfo::set_onlineusers(::google::protobuf::int32 value) {
  set_has_onlineusers();
  onlineusers_ = value;
}

// repeated .EECloud.KeyValuePair RoomData = 4;
inline int RoomInfo::roomdata_size() const {
  return roomdata_.size();
}
inline void RoomInfo::clear_roomdata() {
  roomdata_.Clear();
}
inline const ::EECloud::KeyValuePair& RoomInfo::roomdata(int index) const {
  return roomdata_.Get(index);
}
inline ::EECloud::KeyValuePair* RoomInfo::mutable_roomdata(int index) {
  return roomdata_.Mutable(index);
}
inline ::EECloud::KeyValuePair* RoomInfo::add_roomdata() {
  return roomdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >&
RoomInfo::roomdata() const {
  return roomdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >*
RoomInfo::mutable_roomdata() {
  return &roomdata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RoomInfo_2eproto__INCLUDED
