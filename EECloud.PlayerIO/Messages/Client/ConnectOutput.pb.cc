// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ConnectOutput.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* ConnectOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ConnectOutput_2eproto() {
  protobuf_AddDesc_ConnectOutput_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ConnectOutput.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectOutput_descriptor_ = file->message_type(0);
  static const int ConnectOutput_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectOutput, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectOutput, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectOutput, showbranding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectOutput, gamefsredirectmap_),
  };
  ConnectOutput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConnectOutput_descriptor_,
      ConnectOutput::default_instance_,
      ConnectOutput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectOutput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectOutput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConnectOutput));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ConnectOutput_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConnectOutput_descriptor_, &ConnectOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ConnectOutput_2eproto() {
  delete ConnectOutput::default_instance_;
  delete ConnectOutput_reflection_;
}

void protobuf_AddDesc_ConnectOutput_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ConnectOutput.proto\022\007EECloud\"_\n\rConnec"
    "tOutput\022\r\n\005Token\030\001 \001(\t\022\016\n\006UserId\030\002 \001(\t\022\024"
    "\n\014ShowBranding\030\003 \001(\010\022\031\n\021GameFSRedirectMa"
    "p\030\004 \001(\t", 127);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectOutput.proto", &protobuf_RegisterTypes);
  ConnectOutput::default_instance_ = new ConnectOutput();
  ConnectOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ConnectOutput_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ConnectOutput_2eproto {
  StaticDescriptorInitializer_ConnectOutput_2eproto() {
    protobuf_AddDesc_ConnectOutput_2eproto();
  }
} static_descriptor_initializer_ConnectOutput_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ConnectOutput::kTokenFieldNumber;
const int ConnectOutput::kUserIdFieldNumber;
const int ConnectOutput::kShowBrandingFieldNumber;
const int ConnectOutput::kGameFSRedirectMapFieldNumber;
#endif  // !_MSC_VER

ConnectOutput::ConnectOutput()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConnectOutput::InitAsDefaultInstance() {
}

ConnectOutput::ConnectOutput(const ConnectOutput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConnectOutput::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  showbranding_ = false;
  gamefsredirectmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnectOutput::~ConnectOutput() {
  SharedDtor();
}

void ConnectOutput::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (gamefsredirectmap_ != &::google::protobuf::internal::kEmptyString) {
    delete gamefsredirectmap_;
  }
  if (this != default_instance_) {
  }
}

void ConnectOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectOutput_descriptor_;
}

const ConnectOutput& ConnectOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ConnectOutput_2eproto();  return *default_instance_;
}

ConnectOutput* ConnectOutput::default_instance_ = NULL;

ConnectOutput* ConnectOutput::New() const {
  return new ConnectOutput;
}

void ConnectOutput::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    showbranding_ = false;
    if (has_gamefsredirectmap()) {
      if (gamefsredirectmap_ != &::google::protobuf::internal::kEmptyString) {
        gamefsredirectmap_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConnectOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UserId;
        break;
      }
      
      // optional string UserId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ShowBranding;
        break;
      }
      
      // optional bool ShowBranding = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowBranding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &showbranding_)));
          set_has_showbranding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GameFSRedirectMap;
        break;
      }
      
      // optional string GameFSRedirectMap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GameFSRedirectMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamefsredirectmap()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamefsredirectmap().data(), this->gamefsredirectmap().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConnectOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string Token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }
  
  // optional string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }
  
  // optional bool ShowBranding = 3;
  if (has_showbranding()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->showbranding(), output);
  }
  
  // optional string GameFSRedirectMap = 4;
  if (has_gamefsredirectmap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamefsredirectmap().data(), this->gamefsredirectmap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gamefsredirectmap(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConnectOutput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string Token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }
  
  // optional string UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }
  
  // optional bool ShowBranding = 3;
  if (has_showbranding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->showbranding(), target);
  }
  
  // optional string GameFSRedirectMap = 4;
  if (has_gamefsredirectmap()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamefsredirectmap().data(), this->gamefsredirectmap().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gamefsredirectmap(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConnectOutput::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }
    
    // optional string UserId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional bool ShowBranding = 3;
    if (has_showbranding()) {
      total_size += 1 + 1;
    }
    
    // optional string GameFSRedirectMap = 4;
    if (has_gamefsredirectmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamefsredirectmap());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectOutput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConnectOutput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConnectOutput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnectOutput::MergeFrom(const ConnectOutput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_showbranding()) {
      set_showbranding(from.showbranding());
    }
    if (from.has_gamefsredirectmap()) {
      set_gamefsredirectmap(from.gamefsredirectmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConnectOutput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectOutput::CopyFrom(const ConnectOutput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectOutput::IsInitialized() const {
  
  return true;
}

void ConnectOutput::Swap(ConnectOutput* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(userid_, other->userid_);
    std::swap(showbranding_, other->showbranding_);
    std::swap(gamefsredirectmap_, other->gamefsredirectmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConnectOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectOutput_descriptor_;
  metadata.reflection = ConnectOutput_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
