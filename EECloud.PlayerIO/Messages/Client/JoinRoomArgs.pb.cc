// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "JoinRoomArgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* JoinRoomArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomArgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_JoinRoomArgs_2eproto() {
  protobuf_AddDesc_JoinRoomArgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "JoinRoomArgs.proto");
  GOOGLE_CHECK(file != NULL);
  JoinRoomArgs_descriptor_ = file->message_type(0);
  static const int JoinRoomArgs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomArgs, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomArgs, joindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomArgs, isdevroom_),
  };
  JoinRoomArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinRoomArgs_descriptor_,
      JoinRoomArgs::default_instance_,
      JoinRoomArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinRoomArgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_JoinRoomArgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinRoomArgs_descriptor_, &JoinRoomArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_JoinRoomArgs_2eproto() {
  delete JoinRoomArgs::default_instance_;
  delete JoinRoomArgs_reflection_;
}

void protobuf_AddDesc_JoinRoomArgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::EECloud::protobuf_AddDesc_KeyValuePair_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022JoinRoomArgs.proto\022\007EECloud\032\022KeyValueP"
    "air.proto\"Z\n\014JoinRoomArgs\022\016\n\006RoomId\030\001 \001("
    "\t\022\'\n\010JoinData\030\002 \003(\0132\025.EECloud.KeyValuePa"
    "ir\022\021\n\tIsDevRoom\030\003 \001(\010", 141);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "JoinRoomArgs.proto", &protobuf_RegisterTypes);
  JoinRoomArgs::default_instance_ = new JoinRoomArgs();
  JoinRoomArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_JoinRoomArgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_JoinRoomArgs_2eproto {
  StaticDescriptorInitializer_JoinRoomArgs_2eproto() {
    protobuf_AddDesc_JoinRoomArgs_2eproto();
  }
} static_descriptor_initializer_JoinRoomArgs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int JoinRoomArgs::kRoomIdFieldNumber;
const int JoinRoomArgs::kJoinDataFieldNumber;
const int JoinRoomArgs::kIsDevRoomFieldNumber;
#endif  // !_MSC_VER

JoinRoomArgs::JoinRoomArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinRoomArgs::InitAsDefaultInstance() {
}

JoinRoomArgs::JoinRoomArgs(const JoinRoomArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinRoomArgs::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdevroom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinRoomArgs::~JoinRoomArgs() {
  SharedDtor();
}

void JoinRoomArgs::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (this != default_instance_) {
  }
}

void JoinRoomArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomArgs_descriptor_;
}

const JoinRoomArgs& JoinRoomArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JoinRoomArgs_2eproto();  return *default_instance_;
}

JoinRoomArgs* JoinRoomArgs::default_instance_ = NULL;

JoinRoomArgs* JoinRoomArgs::New() const {
  return new JoinRoomArgs;
}

void JoinRoomArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    isdevroom_ = false;
  }
  joindata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinRoomArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RoomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JoinData;
        break;
      }
      
      // repeated .EECloud.KeyValuePair JoinData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JoinData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_JoinData;
        if (input->ExpectTag(24)) goto parse_IsDevRoom;
        break;
      }
      
      // optional bool IsDevRoom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDevRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdevroom_)));
          set_has_isdevroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinRoomArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }
  
  // repeated .EECloud.KeyValuePair JoinData = 2;
  for (int i = 0; i < this->joindata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->joindata(i), output);
  }
  
  // optional bool IsDevRoom = 3;
  if (has_isdevroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdevroom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinRoomArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }
  
  // repeated .EECloud.KeyValuePair JoinData = 2;
  for (int i = 0; i < this->joindata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->joindata(i), target);
  }
  
  // optional bool IsDevRoom = 3;
  if (has_isdevroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdevroom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinRoomArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }
    
    // optional bool IsDevRoom = 3;
    if (has_isdevroom()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EECloud.KeyValuePair JoinData = 2;
  total_size += 1 * this->joindata_size();
  for (int i = 0; i < this->joindata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joindata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinRoomArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinRoomArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinRoomArgs::MergeFrom(const JoinRoomArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  joindata_.MergeFrom(from.joindata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_isdevroom()) {
      set_isdevroom(from.isdevroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinRoomArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomArgs::CopyFrom(const JoinRoomArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomArgs::IsInitialized() const {
  
  return true;
}

void JoinRoomArgs::Swap(JoinRoomArgs* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    joindata_.Swap(&other->joindata_);
    std::swap(isdevroom_, other->isdevroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinRoomArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomArgs_descriptor_;
  metadata.reflection = JoinRoomArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
