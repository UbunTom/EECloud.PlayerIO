// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SimpleRegisterArgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* SimpleRegisterArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleRegisterArgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SimpleRegisterArgs_2eproto() {
  protobuf_AddDesc_SimpleRegisterArgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SimpleRegisterArgs.proto");
  GOOGLE_CHECK(file != NULL);
  SimpleRegisterArgs_descriptor_ = file->message_type(0);
  static const int SimpleRegisterArgs_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, captchakey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, captchavalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, extradata_),
  };
  SimpleRegisterArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleRegisterArgs_descriptor_,
      SimpleRegisterArgs::default_instance_,
      SimpleRegisterArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleRegisterArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleRegisterArgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SimpleRegisterArgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleRegisterArgs_descriptor_, &SimpleRegisterArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SimpleRegisterArgs_2eproto() {
  delete SimpleRegisterArgs::default_instance_;
  delete SimpleRegisterArgs_reflection_;
}

void protobuf_AddDesc_SimpleRegisterArgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::EECloud::protobuf_AddDesc_KeyValuePair_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030SimpleRegisterArgs.proto\022\007EECloud\032\022Key"
    "ValuePair.proto\"\253\001\n\022SimpleRegisterArgs\022\016"
    "\n\006GameId\030\001 \001(\t\022\020\n\010Username\030\002 \001(\t\022\020\n\010Pass"
    "word\030\003 \001(\t\022\r\n\005Email\030\004 \001(\t\022\022\n\nCaptchaKey\030"
    "\005 \001(\t\022\024\n\014CaptchaValue\030\006 \001(\t\022(\n\tExtraData"
    "\030\007 \003(\0132\025.EECloud.KeyValuePair", 229);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SimpleRegisterArgs.proto", &protobuf_RegisterTypes);
  SimpleRegisterArgs::default_instance_ = new SimpleRegisterArgs();
  SimpleRegisterArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SimpleRegisterArgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SimpleRegisterArgs_2eproto {
  StaticDescriptorInitializer_SimpleRegisterArgs_2eproto() {
    protobuf_AddDesc_SimpleRegisterArgs_2eproto();
  }
} static_descriptor_initializer_SimpleRegisterArgs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SimpleRegisterArgs::kGameIdFieldNumber;
const int SimpleRegisterArgs::kUsernameFieldNumber;
const int SimpleRegisterArgs::kPasswordFieldNumber;
const int SimpleRegisterArgs::kEmailFieldNumber;
const int SimpleRegisterArgs::kCaptchaKeyFieldNumber;
const int SimpleRegisterArgs::kCaptchaValueFieldNumber;
const int SimpleRegisterArgs::kExtraDataFieldNumber;
#endif  // !_MSC_VER

SimpleRegisterArgs::SimpleRegisterArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleRegisterArgs::InitAsDefaultInstance() {
}

SimpleRegisterArgs::SimpleRegisterArgs(const SimpleRegisterArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleRegisterArgs::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captchakey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captchavalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleRegisterArgs::~SimpleRegisterArgs() {
  SharedDtor();
}

void SimpleRegisterArgs::SharedDtor() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    delete gameid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (captchakey_ != &::google::protobuf::internal::kEmptyString) {
    delete captchakey_;
  }
  if (captchavalue_ != &::google::protobuf::internal::kEmptyString) {
    delete captchavalue_;
  }
  if (this != default_instance_) {
  }
}

void SimpleRegisterArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleRegisterArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleRegisterArgs_descriptor_;
}

const SimpleRegisterArgs& SimpleRegisterArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SimpleRegisterArgs_2eproto();  return *default_instance_;
}

SimpleRegisterArgs* SimpleRegisterArgs::default_instance_ = NULL;

SimpleRegisterArgs* SimpleRegisterArgs::New() const {
  return new SimpleRegisterArgs;
}

void SimpleRegisterArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gameid()) {
      if (gameid_ != &::google::protobuf::internal::kEmptyString) {
        gameid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_captchakey()) {
      if (captchakey_ != &::google::protobuf::internal::kEmptyString) {
        captchakey_->clear();
      }
    }
    if (has_captchavalue()) {
      if (captchavalue_ != &::google::protobuf::internal::kEmptyString) {
        captchavalue_->clear();
      }
    }
  }
  extradata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleRegisterArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GameId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gameid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gameid().data(), this->gameid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Username;
        break;
      }
      
      // optional string Username = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Password;
        break;
      }
      
      // optional string Password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Email;
        break;
      }
      
      // optional string Email = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CaptchaKey;
        break;
      }
      
      // optional string CaptchaKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CaptchaKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captchakey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->captchakey().data(), this->captchakey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CaptchaValue;
        break;
      }
      
      // optional string CaptchaValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CaptchaValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captchavalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->captchavalue().data(), this->captchavalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ExtraData;
        break;
      }
      
      // repeated .EECloud.KeyValuePair ExtraData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ExtraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extradata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ExtraData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleRegisterArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string GameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gameid(), output);
  }
  
  // optional string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->username(), output);
  }
  
  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }
  
  // optional string Email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->email(), output);
  }
  
  // optional string CaptchaKey = 5;
  if (has_captchakey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchakey().data(), this->captchakey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->captchakey(), output);
  }
  
  // optional string CaptchaValue = 6;
  if (has_captchavalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchavalue().data(), this->captchavalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->captchavalue(), output);
  }
  
  // repeated .EECloud.KeyValuePair ExtraData = 7;
  for (int i = 0; i < this->extradata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->extradata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleRegisterArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string GameId = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gameid().data(), this->gameid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gameid(), target);
  }
  
  // optional string Username = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }
  
  // optional string Password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }
  
  // optional string Email = 4;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->email(), target);
  }
  
  // optional string CaptchaKey = 5;
  if (has_captchakey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchakey().data(), this->captchakey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->captchakey(), target);
  }
  
  // optional string CaptchaValue = 6;
  if (has_captchavalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchavalue().data(), this->captchavalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->captchavalue(), target);
  }
  
  // repeated .EECloud.KeyValuePair ExtraData = 7;
  for (int i = 0; i < this->extradata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->extradata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleRegisterArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GameId = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gameid());
    }
    
    // optional string Username = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }
    
    // optional string Password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional string Email = 4;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }
    
    // optional string CaptchaKey = 5;
    if (has_captchakey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captchakey());
    }
    
    // optional string CaptchaValue = 6;
    if (has_captchavalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captchavalue());
    }
    
  }
  // repeated .EECloud.KeyValuePair ExtraData = 7;
  total_size += 1 * this->extradata_size();
  for (int i = 0; i < this->extradata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extradata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleRegisterArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleRegisterArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleRegisterArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleRegisterArgs::MergeFrom(const SimpleRegisterArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  extradata_.MergeFrom(from.extradata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_captchakey()) {
      set_captchakey(from.captchakey());
    }
    if (from.has_captchavalue()) {
      set_captchavalue(from.captchavalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleRegisterArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleRegisterArgs::CopyFrom(const SimpleRegisterArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRegisterArgs::IsInitialized() const {
  
  return true;
}

void SimpleRegisterArgs::Swap(SimpleRegisterArgs* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    std::swap(email_, other->email_);
    std::swap(captchakey_, other->captchakey_);
    std::swap(captchavalue_, other->captchavalue_);
    extradata_.Swap(&other->extradata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleRegisterArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleRegisterArgs_descriptor_;
  metadata.reflection = SimpleRegisterArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
