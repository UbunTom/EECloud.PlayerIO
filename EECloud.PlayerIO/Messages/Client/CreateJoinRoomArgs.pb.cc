// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CreateJoinRoomArgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* CreateJoinRoomArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateJoinRoomArgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CreateJoinRoomArgs_2eproto() {
  protobuf_AddDesc_CreateJoinRoomArgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CreateJoinRoomArgs.proto");
  GOOGLE_CHECK(file != NULL);
  CreateJoinRoomArgs_descriptor_ = file->message_type(0);
  static const int CreateJoinRoomArgs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, roomdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, joindata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, isdevroom_),
  };
  CreateJoinRoomArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateJoinRoomArgs_descriptor_,
      CreateJoinRoomArgs::default_instance_,
      CreateJoinRoomArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateJoinRoomArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateJoinRoomArgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CreateJoinRoomArgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateJoinRoomArgs_descriptor_, &CreateJoinRoomArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CreateJoinRoomArgs_2eproto() {
  delete CreateJoinRoomArgs::default_instance_;
  delete CreateJoinRoomArgs_reflection_;
}

void protobuf_AddDesc_CreateJoinRoomArgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::EECloud::protobuf_AddDesc_KeyValuePair_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030CreateJoinRoomArgs.proto\022\007EECloud\032\022Key"
    "ValuePair.proto\"\256\001\n\022CreateJoinRoomArgs\022\016"
    "\n\006RoomId\030\001 \001(\t\022\022\n\nServerType\030\002 \001(\t\022\017\n\007Vi"
    "sible\030\003 \001(\010\022\'\n\010RoomData\030\004 \003(\0132\025.EECloud."
    "KeyValuePair\022\'\n\010JoinData\030\005 \003(\0132\025.EECloud"
    ".KeyValuePair\022\021\n\tIsDevRoom\030\006 \001(\010", 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CreateJoinRoomArgs.proto", &protobuf_RegisterTypes);
  CreateJoinRoomArgs::default_instance_ = new CreateJoinRoomArgs();
  CreateJoinRoomArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CreateJoinRoomArgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CreateJoinRoomArgs_2eproto {
  StaticDescriptorInitializer_CreateJoinRoomArgs_2eproto() {
    protobuf_AddDesc_CreateJoinRoomArgs_2eproto();
  }
} static_descriptor_initializer_CreateJoinRoomArgs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CreateJoinRoomArgs::kRoomIdFieldNumber;
const int CreateJoinRoomArgs::kServerTypeFieldNumber;
const int CreateJoinRoomArgs::kVisibleFieldNumber;
const int CreateJoinRoomArgs::kRoomDataFieldNumber;
const int CreateJoinRoomArgs::kJoinDataFieldNumber;
const int CreateJoinRoomArgs::kIsDevRoomFieldNumber;
#endif  // !_MSC_VER

CreateJoinRoomArgs::CreateJoinRoomArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateJoinRoomArgs::InitAsDefaultInstance() {
}

CreateJoinRoomArgs::CreateJoinRoomArgs(const CreateJoinRoomArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateJoinRoomArgs::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  visible_ = false;
  isdevroom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateJoinRoomArgs::~CreateJoinRoomArgs() {
  SharedDtor();
}

void CreateJoinRoomArgs::SharedDtor() {
  if (roomid_ != &::google::protobuf::internal::kEmptyString) {
    delete roomid_;
  }
  if (servertype_ != &::google::protobuf::internal::kEmptyString) {
    delete servertype_;
  }
  if (this != default_instance_) {
  }
}

void CreateJoinRoomArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateJoinRoomArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateJoinRoomArgs_descriptor_;
}

const CreateJoinRoomArgs& CreateJoinRoomArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CreateJoinRoomArgs_2eproto();  return *default_instance_;
}

CreateJoinRoomArgs* CreateJoinRoomArgs::default_instance_ = NULL;

CreateJoinRoomArgs* CreateJoinRoomArgs::New() const {
  return new CreateJoinRoomArgs;
}

void CreateJoinRoomArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomid()) {
      if (roomid_ != &::google::protobuf::internal::kEmptyString) {
        roomid_->clear();
      }
    }
    if (has_servertype()) {
      if (servertype_ != &::google::protobuf::internal::kEmptyString) {
        servertype_->clear();
      }
    }
    visible_ = false;
    isdevroom_ = false;
  }
  roomdata_.Clear();
  joindata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateJoinRoomArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RoomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomid().data(), this->roomid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ServerType;
        break;
      }
      
      // optional string ServerType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servertype().data(), this->servertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Visible;
        break;
      }
      
      // optional bool Visible = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoomData;
        break;
      }
      
      // repeated .EECloud.KeyValuePair RoomData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoomData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoomData;
        if (input->ExpectTag(42)) goto parse_JoinData;
        break;
      }
      
      // repeated .EECloud.KeyValuePair JoinData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JoinData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_joindata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_JoinData;
        if (input->ExpectTag(48)) goto parse_IsDevRoom;
        break;
      }
      
      // optional bool IsDevRoom = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsDevRoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdevroom_)));
          set_has_isdevroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateJoinRoomArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomid(), output);
  }
  
  // optional string ServerType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertype().data(), this->servertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->servertype(), output);
  }
  
  // optional bool Visible = 3;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->visible(), output);
  }
  
  // repeated .EECloud.KeyValuePair RoomData = 4;
  for (int i = 0; i < this->roomdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roomdata(i), output);
  }
  
  // repeated .EECloud.KeyValuePair JoinData = 5;
  for (int i = 0; i < this->joindata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->joindata(i), output);
  }
  
  // optional bool IsDevRoom = 6;
  if (has_isdevroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isdevroom(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateJoinRoomArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string RoomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomid().data(), this->roomid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomid(), target);
  }
  
  // optional string ServerType = 2;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servertype().data(), this->servertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->servertype(), target);
  }
  
  // optional bool Visible = 3;
  if (has_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->visible(), target);
  }
  
  // repeated .EECloud.KeyValuePair RoomData = 4;
  for (int i = 0; i < this->roomdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roomdata(i), target);
  }
  
  // repeated .EECloud.KeyValuePair JoinData = 5;
  for (int i = 0; i < this->joindata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->joindata(i), target);
  }
  
  // optional bool IsDevRoom = 6;
  if (has_isdevroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isdevroom(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateJoinRoomArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RoomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomid());
    }
    
    // optional string ServerType = 2;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servertype());
    }
    
    // optional bool Visible = 3;
    if (has_visible()) {
      total_size += 1 + 1;
    }
    
    // optional bool IsDevRoom = 6;
    if (has_isdevroom()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EECloud.KeyValuePair RoomData = 4;
  total_size += 1 * this->roomdata_size();
  for (int i = 0; i < this->roomdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomdata(i));
  }
  
  // repeated .EECloud.KeyValuePair JoinData = 5;
  total_size += 1 * this->joindata_size();
  for (int i = 0; i < this->joindata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->joindata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateJoinRoomArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateJoinRoomArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateJoinRoomArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateJoinRoomArgs::MergeFrom(const CreateJoinRoomArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomdata_.MergeFrom(from.roomdata_);
  joindata_.MergeFrom(from.joindata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_isdevroom()) {
      set_isdevroom(from.isdevroom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateJoinRoomArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateJoinRoomArgs::CopyFrom(const CreateJoinRoomArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateJoinRoomArgs::IsInitialized() const {
  
  return true;
}

void CreateJoinRoomArgs::Swap(CreateJoinRoomArgs* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(servertype_, other->servertype_);
    std::swap(visible_, other->visible_);
    roomdata_.Swap(&other->roomdata_);
    joindata_.Swap(&other->joindata_);
    std::swap(isdevroom_, other->isdevroom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateJoinRoomArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateJoinRoomArgs_descriptor_;
  metadata.reflection = CreateJoinRoomArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
