// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleRegisterArgs.proto

#ifndef PROTOBUF_SimpleRegisterArgs_2eproto__INCLUDED
#define PROTOBUF_SimpleRegisterArgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "../KeyValuePair.pb.h"
// @@protoc_insertion_point(includes)

namespace EECloud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SimpleRegisterArgs_2eproto();
void protobuf_AssignDesc_SimpleRegisterArgs_2eproto();
void protobuf_ShutdownFile_SimpleRegisterArgs_2eproto();

class SimpleRegisterArgs;

// ===================================================================

class SimpleRegisterArgs : public ::google::protobuf::Message {
 public:
  SimpleRegisterArgs();
  virtual ~SimpleRegisterArgs();
  
  SimpleRegisterArgs(const SimpleRegisterArgs& from);
  
  inline SimpleRegisterArgs& operator=(const SimpleRegisterArgs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleRegisterArgs& default_instance();
  
  void Swap(SimpleRegisterArgs* other);
  
  // implements Message ----------------------------------------------
  
  SimpleRegisterArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleRegisterArgs& from);
  void MergeFrom(const SimpleRegisterArgs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GameId = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 1;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  
  // optional string Username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  
  // optional string Password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  
  // optional string Email = 4;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 4;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  
  // optional string CaptchaKey = 5;
  inline bool has_captchakey() const;
  inline void clear_captchakey();
  static const int kCaptchaKeyFieldNumber = 5;
  inline const ::std::string& captchakey() const;
  inline void set_captchakey(const ::std::string& value);
  inline void set_captchakey(const char* value);
  inline void set_captchakey(const char* value, size_t size);
  inline ::std::string* mutable_captchakey();
  inline ::std::string* release_captchakey();
  
  // optional string CaptchaValue = 6;
  inline bool has_captchavalue() const;
  inline void clear_captchavalue();
  static const int kCaptchaValueFieldNumber = 6;
  inline const ::std::string& captchavalue() const;
  inline void set_captchavalue(const ::std::string& value);
  inline void set_captchavalue(const char* value);
  inline void set_captchavalue(const char* value, size_t size);
  inline ::std::string* mutable_captchavalue();
  inline ::std::string* release_captchavalue();
  
  // repeated .EECloud.KeyValuePair ExtraData = 7;
  inline int extradata_size() const;
  inline void clear_extradata();
  static const int kExtraDataFieldNumber = 7;
  inline const ::EECloud::KeyValuePair& extradata(int index) const;
  inline ::EECloud::KeyValuePair* mutable_extradata(int index);
  inline ::EECloud::KeyValuePair* add_extradata();
  inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >&
      extradata() const;
  inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >*
      mutable_extradata();
  
  // @@protoc_insertion_point(class_scope:EECloud.SimpleRegisterArgs)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_captchakey();
  inline void clear_has_captchakey();
  inline void set_has_captchavalue();
  inline void clear_has_captchavalue();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* gameid_;
  ::std::string* username_;
  ::std::string* password_;
  ::std::string* email_;
  ::std::string* captchakey_;
  ::std::string* captchavalue_;
  ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair > extradata_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_SimpleRegisterArgs_2eproto();
  friend void protobuf_AssignDesc_SimpleRegisterArgs_2eproto();
  friend void protobuf_ShutdownFile_SimpleRegisterArgs_2eproto();
  
  void InitAsDefaultInstance();
  static SimpleRegisterArgs* default_instance_;
};
// ===================================================================


// ===================================================================

// SimpleRegisterArgs

// optional string GameId = 1;
inline bool SimpleRegisterArgs::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleRegisterArgs::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleRegisterArgs::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleRegisterArgs::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& SimpleRegisterArgs::gameid() const {
  return *gameid_;
}
inline void SimpleRegisterArgs::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void SimpleRegisterArgs::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void SimpleRegisterArgs::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRegisterArgs::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* SimpleRegisterArgs::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Username = 2;
inline bool SimpleRegisterArgs::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleRegisterArgs::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleRegisterArgs::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimpleRegisterArgs::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& SimpleRegisterArgs::username() const {
  return *username_;
}
inline void SimpleRegisterArgs::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void SimpleRegisterArgs::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void SimpleRegisterArgs::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRegisterArgs::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* SimpleRegisterArgs::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Password = 3;
inline bool SimpleRegisterArgs::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimpleRegisterArgs::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimpleRegisterArgs::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimpleRegisterArgs::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SimpleRegisterArgs::password() const {
  return *password_;
}
inline void SimpleRegisterArgs::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SimpleRegisterArgs::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SimpleRegisterArgs::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRegisterArgs::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SimpleRegisterArgs::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string Email = 4;
inline bool SimpleRegisterArgs::has_email() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimpleRegisterArgs::set_has_email() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimpleRegisterArgs::clear_has_email() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimpleRegisterArgs::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& SimpleRegisterArgs::email() const {
  return *email_;
}
inline void SimpleRegisterArgs::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SimpleRegisterArgs::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void SimpleRegisterArgs::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRegisterArgs::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* SimpleRegisterArgs::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string CaptchaKey = 5;
inline bool SimpleRegisterArgs::has_captchakey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimpleRegisterArgs::set_has_captchakey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimpleRegisterArgs::clear_has_captchakey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimpleRegisterArgs::clear_captchakey() {
  if (captchakey_ != &::google::protobuf::internal::kEmptyString) {
    captchakey_->clear();
  }
  clear_has_captchakey();
}
inline const ::std::string& SimpleRegisterArgs::captchakey() const {
  return *captchakey_;
}
inline void SimpleRegisterArgs::set_captchakey(const ::std::string& value) {
  set_has_captchakey();
  if (captchakey_ == &::google::protobuf::internal::kEmptyString) {
    captchakey_ = new ::std::string;
  }
  captchakey_->assign(value);
}
inline void SimpleRegisterArgs::set_captchakey(const char* value) {
  set_has_captchakey();
  if (captchakey_ == &::google::protobuf::internal::kEmptyString) {
    captchakey_ = new ::std::string;
  }
  captchakey_->assign(value);
}
inline void SimpleRegisterArgs::set_captchakey(const char* value, size_t size) {
  set_has_captchakey();
  if (captchakey_ == &::google::protobuf::internal::kEmptyString) {
    captchakey_ = new ::std::string;
  }
  captchakey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRegisterArgs::mutable_captchakey() {
  set_has_captchakey();
  if (captchakey_ == &::google::protobuf::internal::kEmptyString) {
    captchakey_ = new ::std::string;
  }
  return captchakey_;
}
inline ::std::string* SimpleRegisterArgs::release_captchakey() {
  clear_has_captchakey();
  if (captchakey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = captchakey_;
    captchakey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string CaptchaValue = 6;
inline bool SimpleRegisterArgs::has_captchavalue() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimpleRegisterArgs::set_has_captchavalue() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimpleRegisterArgs::clear_has_captchavalue() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimpleRegisterArgs::clear_captchavalue() {
  if (captchavalue_ != &::google::protobuf::internal::kEmptyString) {
    captchavalue_->clear();
  }
  clear_has_captchavalue();
}
inline const ::std::string& SimpleRegisterArgs::captchavalue() const {
  return *captchavalue_;
}
inline void SimpleRegisterArgs::set_captchavalue(const ::std::string& value) {
  set_has_captchavalue();
  if (captchavalue_ == &::google::protobuf::internal::kEmptyString) {
    captchavalue_ = new ::std::string;
  }
  captchavalue_->assign(value);
}
inline void SimpleRegisterArgs::set_captchavalue(const char* value) {
  set_has_captchavalue();
  if (captchavalue_ == &::google::protobuf::internal::kEmptyString) {
    captchavalue_ = new ::std::string;
  }
  captchavalue_->assign(value);
}
inline void SimpleRegisterArgs::set_captchavalue(const char* value, size_t size) {
  set_has_captchavalue();
  if (captchavalue_ == &::google::protobuf::internal::kEmptyString) {
    captchavalue_ = new ::std::string;
  }
  captchavalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRegisterArgs::mutable_captchavalue() {
  set_has_captchavalue();
  if (captchavalue_ == &::google::protobuf::internal::kEmptyString) {
    captchavalue_ = new ::std::string;
  }
  return captchavalue_;
}
inline ::std::string* SimpleRegisterArgs::release_captchavalue() {
  clear_has_captchavalue();
  if (captchavalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = captchavalue_;
    captchavalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .EECloud.KeyValuePair ExtraData = 7;
inline int SimpleRegisterArgs::extradata_size() const {
  return extradata_.size();
}
inline void SimpleRegisterArgs::clear_extradata() {
  extradata_.Clear();
}
inline const ::EECloud::KeyValuePair& SimpleRegisterArgs::extradata(int index) const {
  return extradata_.Get(index);
}
inline ::EECloud::KeyValuePair* SimpleRegisterArgs::mutable_extradata(int index) {
  return extradata_.Mutable(index);
}
inline ::EECloud::KeyValuePair* SimpleRegisterArgs::add_extradata() {
  return extradata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >&
SimpleRegisterArgs::extradata() const {
  return extradata_;
}
inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >*
SimpleRegisterArgs::mutable_extradata() {
  return &extradata_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SimpleRegisterArgs_2eproto__INCLUDED
