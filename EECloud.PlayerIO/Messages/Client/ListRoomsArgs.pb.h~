// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ListRoomsArgs.proto

#ifndef PROTOBUF_ListRoomsArgs_2eproto__INCLUDED
#define PROTOBUF_ListRoomsArgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "KeyValuePair.pb.h"
// @@protoc_insertion_point(includes)

namespace EECloud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ListRoomsArgs_2eproto();
void protobuf_AssignDesc_ListRoomsArgs_2eproto();
void protobuf_ShutdownFile_ListRoomsArgs_2eproto();

class ListRoomsArgs;

// ===================================================================

class ListRoomsArgs : public ::google::protobuf::Message {
 public:
  ListRoomsArgs();
  virtual ~ListRoomsArgs();
  
  ListRoomsArgs(const ListRoomsArgs& from);
  
  inline ListRoomsArgs& operator=(const ListRoomsArgs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListRoomsArgs& default_instance();
  
  void Swap(ListRoomsArgs* other);
  
  // implements Message ----------------------------------------------
  
  ListRoomsArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListRoomsArgs& from);
  void MergeFrom(const ListRoomsArgs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string RoomType = 1;
  inline bool has_roomtype() const;
  inline void clear_roomtype();
  static const int kRoomTypeFieldNumber = 1;
  inline const ::std::string& roomtype() const;
  inline void set_roomtype(const ::std::string& value);
  inline void set_roomtype(const char* value);
  inline void set_roomtype(const char* value, size_t size);
  inline ::std::string* mutable_roomtype();
  inline ::std::string* release_roomtype();
  
  // repeated .EECloud.KeyValuePair SearchCriteria = 2;
  inline int searchcriteria_size() const;
  inline void clear_searchcriteria();
  static const int kSearchCriteriaFieldNumber = 2;
  inline const ::EECloud::KeyValuePair& searchcriteria(int index) const;
  inline ::EECloud::KeyValuePair* mutable_searchcriteria(int index);
  inline ::EECloud::KeyValuePair* add_searchcriteria();
  inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >&
      searchcriteria() const;
  inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >*
      mutable_searchcriteria();
  
  // optional int32 ResultLimit = 3;
  inline bool has_resultlimit() const;
  inline void clear_resultlimit();
  static const int kResultLimitFieldNumber = 3;
  inline ::google::protobuf::int32 resultlimit() const;
  inline void set_resultlimit(::google::protobuf::int32 value);
  
  // optional int32 ResultOffset = 4;
  inline bool has_resultoffset() const;
  inline void clear_resultoffset();
  static const int kResultOffsetFieldNumber = 4;
  inline ::google::protobuf::int32 resultoffset() const;
  inline void set_resultoffset(::google::protobuf::int32 value);
  
  // optional bool OnlyDevRooms = 5;
  inline bool has_onlydevrooms() const;
  inline void clear_onlydevrooms();
  static const int kOnlyDevRoomsFieldNumber = 5;
  inline bool onlydevrooms() const;
  inline void set_onlydevrooms(bool value);
  
  // @@protoc_insertion_point(class_scope:EECloud.ListRoomsArgs)
 private:
  inline void set_has_roomtype();
  inline void clear_has_roomtype();
  inline void set_has_resultlimit();
  inline void clear_has_resultlimit();
  inline void set_has_resultoffset();
  inline void clear_has_resultoffset();
  inline void set_has_onlydevrooms();
  inline void clear_has_onlydevrooms();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* roomtype_;
  ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair > searchcriteria_;
  ::google::protobuf::int32 resultlimit_;
  ::google::protobuf::int32 resultoffset_;
  bool onlydevrooms_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_ListRoomsArgs_2eproto();
  friend void protobuf_AssignDesc_ListRoomsArgs_2eproto();
  friend void protobuf_ShutdownFile_ListRoomsArgs_2eproto();
  
  void InitAsDefaultInstance();
  static ListRoomsArgs* default_instance_;
};
// ===================================================================


// ===================================================================

// ListRoomsArgs

// optional string RoomType = 1;
inline bool ListRoomsArgs::has_roomtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListRoomsArgs::set_has_roomtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListRoomsArgs::clear_has_roomtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListRoomsArgs::clear_roomtype() {
  if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
    roomtype_->clear();
  }
  clear_has_roomtype();
}
inline const ::std::string& ListRoomsArgs::roomtype() const {
  return *roomtype_;
}
inline void ListRoomsArgs::set_roomtype(const ::std::string& value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
}
inline void ListRoomsArgs::set_roomtype(const char* value) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(value);
}
inline void ListRoomsArgs::set_roomtype(const char* value, size_t size) {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  roomtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ListRoomsArgs::mutable_roomtype() {
  set_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    roomtype_ = new ::std::string;
  }
  return roomtype_;
}
inline ::std::string* ListRoomsArgs::release_roomtype() {
  clear_has_roomtype();
  if (roomtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roomtype_;
    roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .EECloud.KeyValuePair SearchCriteria = 2;
inline int ListRoomsArgs::searchcriteria_size() const {
  return searchcriteria_.size();
}
inline void ListRoomsArgs::clear_searchcriteria() {
  searchcriteria_.Clear();
}
inline const ::EECloud::KeyValuePair& ListRoomsArgs::searchcriteria(int index) const {
  return searchcriteria_.Get(index);
}
inline ::EECloud::KeyValuePair* ListRoomsArgs::mutable_searchcriteria(int index) {
  return searchcriteria_.Mutable(index);
}
inline ::EECloud::KeyValuePair* ListRoomsArgs::add_searchcriteria() {
  return searchcriteria_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >&
ListRoomsArgs::searchcriteria() const {
  return searchcriteria_;
}
inline ::google::protobuf::RepeatedPtrField< ::EECloud::KeyValuePair >*
ListRoomsArgs::mutable_searchcriteria() {
  return &searchcriteria_;
}

// optional int32 ResultLimit = 3;
inline bool ListRoomsArgs::has_resultlimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListRoomsArgs::set_has_resultlimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListRoomsArgs::clear_has_resultlimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListRoomsArgs::clear_resultlimit() {
  resultlimit_ = 0;
  clear_has_resultlimit();
}
inline ::google::protobuf::int32 ListRoomsArgs::resultlimit() const {
  return resultlimit_;
}
inline void ListRoomsArgs::set_resultlimit(::google::protobuf::int32 value) {
  set_has_resultlimit();
  resultlimit_ = value;
}

// optional int32 ResultOffset = 4;
inline bool ListRoomsArgs::has_resultoffset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListRoomsArgs::set_has_resultoffset() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListRoomsArgs::clear_has_resultoffset() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListRoomsArgs::clear_resultoffset() {
  resultoffset_ = 0;
  clear_has_resultoffset();
}
inline ::google::protobuf::int32 ListRoomsArgs::resultoffset() const {
  return resultoffset_;
}
inline void ListRoomsArgs::set_resultoffset(::google::protobuf::int32 value) {
  set_has_resultoffset();
  resultoffset_ = value;
}

// optional bool OnlyDevRooms = 5;
inline bool ListRoomsArgs::has_onlydevrooms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListRoomsArgs::set_has_onlydevrooms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListRoomsArgs::clear_has_onlydevrooms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListRoomsArgs::clear_onlydevrooms() {
  onlydevrooms_ = false;
  clear_has_onlydevrooms();
}
inline bool ListRoomsArgs::onlydevrooms() const {
  return onlydevrooms_;
}
inline void ListRoomsArgs::set_onlydevrooms(bool value) {
  set_has_onlydevrooms();
  onlydevrooms_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ListRoomsArgs_2eproto__INCLUDED
