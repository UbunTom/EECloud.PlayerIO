// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ListRoomsArgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* ListRoomsArgs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ListRoomsArgs_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ListRoomsArgs_2eproto() {
  protobuf_AddDesc_ListRoomsArgs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ListRoomsArgs.proto");
  GOOGLE_CHECK(file != NULL);
  ListRoomsArgs_descriptor_ = file->message_type(0);
  static const int ListRoomsArgs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, searchcriteria_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, resultlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, resultoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, onlydevrooms_),
  };
  ListRoomsArgs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ListRoomsArgs_descriptor_,
      ListRoomsArgs::default_instance_,
      ListRoomsArgs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListRoomsArgs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ListRoomsArgs));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ListRoomsArgs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ListRoomsArgs_descriptor_, &ListRoomsArgs::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ListRoomsArgs_2eproto() {
  delete ListRoomsArgs::default_instance_;
  delete ListRoomsArgs_reflection_;
}

void protobuf_AddDesc_ListRoomsArgs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::EECloud::protobuf_AddDesc_KeyValuePair_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ListRoomsArgs.proto\022\007EECloud\032\022KeyValue"
    "Pair.proto\"\221\001\n\rListRoomsArgs\022\020\n\010RoomType"
    "\030\001 \001(\t\022-\n\016SearchCriteria\030\002 \003(\0132\025.EECloud"
    ".KeyValuePair\022\023\n\013ResultLimit\030\003 \001(\005\022\024\n\014Re"
    "sultOffset\030\004 \001(\005\022\024\n\014OnlyDevRooms\030\005 \001(\010", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ListRoomsArgs.proto", &protobuf_RegisterTypes);
  ListRoomsArgs::default_instance_ = new ListRoomsArgs();
  ListRoomsArgs::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ListRoomsArgs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ListRoomsArgs_2eproto {
  StaticDescriptorInitializer_ListRoomsArgs_2eproto() {
    protobuf_AddDesc_ListRoomsArgs_2eproto();
  }
} static_descriptor_initializer_ListRoomsArgs_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ListRoomsArgs::kRoomTypeFieldNumber;
const int ListRoomsArgs::kSearchCriteriaFieldNumber;
const int ListRoomsArgs::kResultLimitFieldNumber;
const int ListRoomsArgs::kResultOffsetFieldNumber;
const int ListRoomsArgs::kOnlyDevRoomsFieldNumber;
#endif  // !_MSC_VER

ListRoomsArgs::ListRoomsArgs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ListRoomsArgs::InitAsDefaultInstance() {
}

ListRoomsArgs::ListRoomsArgs(const ListRoomsArgs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ListRoomsArgs::SharedCtor() {
  _cached_size_ = 0;
  roomtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resultlimit_ = 0;
  resultoffset_ = 0;
  onlydevrooms_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListRoomsArgs::~ListRoomsArgs() {
  SharedDtor();
}

void ListRoomsArgs::SharedDtor() {
  if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
    delete roomtype_;
  }
  if (this != default_instance_) {
  }
}

void ListRoomsArgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRoomsArgs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ListRoomsArgs_descriptor_;
}

const ListRoomsArgs& ListRoomsArgs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ListRoomsArgs_2eproto();  return *default_instance_;
}

ListRoomsArgs* ListRoomsArgs::default_instance_ = NULL;

ListRoomsArgs* ListRoomsArgs::New() const {
  return new ListRoomsArgs;
}

void ListRoomsArgs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomtype()) {
      if (roomtype_ != &::google::protobuf::internal::kEmptyString) {
        roomtype_->clear();
      }
    }
    resultlimit_ = 0;
    resultoffset_ = 0;
    onlydevrooms_ = false;
  }
  searchcriteria_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ListRoomsArgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string RoomType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roomtype().data(), this->roomtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SearchCriteria;
        break;
      }
      
      // repeated .EECloud.KeyValuePair SearchCriteria = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SearchCriteria:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_searchcriteria()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SearchCriteria;
        if (input->ExpectTag(24)) goto parse_ResultLimit;
        break;
      }
      
      // optional int32 ResultLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResultLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultlimit_)));
          set_has_resultlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ResultOffset;
        break;
      }
      
      // optional int32 ResultOffset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResultOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultoffset_)));
          set_has_resultoffset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OnlyDevRooms;
        break;
      }
      
      // optional bool OnlyDevRooms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlyDevRooms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onlydevrooms_)));
          set_has_onlydevrooms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListRoomsArgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string RoomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->roomtype(), output);
  }
  
  // repeated .EECloud.KeyValuePair SearchCriteria = 2;
  for (int i = 0; i < this->searchcriteria_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->searchcriteria(i), output);
  }
  
  // optional int32 ResultLimit = 3;
  if (has_resultlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resultlimit(), output);
  }
  
  // optional int32 ResultOffset = 4;
  if (has_resultoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->resultoffset(), output);
  }
  
  // optional bool OnlyDevRooms = 5;
  if (has_onlydevrooms()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->onlydevrooms(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ListRoomsArgs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string RoomType = 1;
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roomtype().data(), this->roomtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->roomtype(), target);
  }
  
  // repeated .EECloud.KeyValuePair SearchCriteria = 2;
  for (int i = 0; i < this->searchcriteria_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->searchcriteria(i), target);
  }
  
  // optional int32 ResultLimit = 3;
  if (has_resultlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->resultlimit(), target);
  }
  
  // optional int32 ResultOffset = 4;
  if (has_resultoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->resultoffset(), target);
  }
  
  // optional bool OnlyDevRooms = 5;
  if (has_onlydevrooms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->onlydevrooms(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ListRoomsArgs::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string RoomType = 1;
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomtype());
    }
    
    // optional int32 ResultLimit = 3;
    if (has_resultlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultlimit());
    }
    
    // optional int32 ResultOffset = 4;
    if (has_resultoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultoffset());
    }
    
    // optional bool OnlyDevRooms = 5;
    if (has_onlydevrooms()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .EECloud.KeyValuePair SearchCriteria = 2;
  total_size += 1 * this->searchcriteria_size();
  for (int i = 0; i < this->searchcriteria_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->searchcriteria(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRoomsArgs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ListRoomsArgs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ListRoomsArgs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ListRoomsArgs::MergeFrom(const ListRoomsArgs& from) {
  GOOGLE_CHECK_NE(&from, this);
  searchcriteria_.MergeFrom(from.searchcriteria_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_resultlimit()) {
      set_resultlimit(from.resultlimit());
    }
    if (from.has_resultoffset()) {
      set_resultoffset(from.resultoffset());
    }
    if (from.has_onlydevrooms()) {
      set_onlydevrooms(from.onlydevrooms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ListRoomsArgs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRoomsArgs::CopyFrom(const ListRoomsArgs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRoomsArgs::IsInitialized() const {
  
  return true;
}

void ListRoomsArgs::Swap(ListRoomsArgs* other) {
  if (other != this) {
    std::swap(roomtype_, other->roomtype_);
    searchcriteria_.Swap(&other->searchcriteria_);
    std::swap(resultlimit_, other->resultlimit_);
    std::swap(resultoffset_, other->resultoffset_);
    std::swap(onlydevrooms_, other->onlydevrooms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ListRoomsArgs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ListRoomsArgs_descriptor_;
  metadata.reflection = ListRoomsArgs_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
