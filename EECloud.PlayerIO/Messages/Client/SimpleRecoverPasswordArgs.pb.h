// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SimpleRecoverPasswordArgs.proto

#ifndef PROTOBUF_SimpleRecoverPasswordArgs_2eproto__INCLUDED
#define PROTOBUF_SimpleRecoverPasswordArgs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SimpleRecoverPasswordArgs_2eproto();
void protobuf_AssignDesc_SimpleRecoverPasswordArgs_2eproto();
void protobuf_ShutdownFile_SimpleRecoverPasswordArgs_2eproto();

class SimpleRecoverPasswordArgs;

// ===================================================================

class SimpleRecoverPasswordArgs : public ::google::protobuf::Message {
 public:
  SimpleRecoverPasswordArgs();
  virtual ~SimpleRecoverPasswordArgs();
  
  SimpleRecoverPasswordArgs(const SimpleRecoverPasswordArgs& from);
  
  inline SimpleRecoverPasswordArgs& operator=(const SimpleRecoverPasswordArgs& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SimpleRecoverPasswordArgs& default_instance();
  
  void Swap(SimpleRecoverPasswordArgs* other);
  
  // implements Message ----------------------------------------------
  
  SimpleRecoverPasswordArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimpleRecoverPasswordArgs& from);
  void MergeFrom(const SimpleRecoverPasswordArgs& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string GameId = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameIdFieldNumber = 1;
  inline const ::std::string& gameid() const;
  inline void set_gameid(const ::std::string& value);
  inline void set_gameid(const char* value);
  inline void set_gameid(const char* value, size_t size);
  inline ::std::string* mutable_gameid();
  inline ::std::string* release_gameid();
  
  // optional string UsernameOrEmail = 2;
  inline bool has_usernameoremail() const;
  inline void clear_usernameoremail();
  static const int kUsernameOrEmailFieldNumber = 2;
  inline const ::std::string& usernameoremail() const;
  inline void set_usernameoremail(const ::std::string& value);
  inline void set_usernameoremail(const char* value);
  inline void set_usernameoremail(const char* value, size_t size);
  inline ::std::string* mutable_usernameoremail();
  inline ::std::string* release_usernameoremail();
  
  // @@protoc_insertion_point(class_scope:EECloud.SimpleRecoverPasswordArgs)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_usernameoremail();
  inline void clear_has_usernameoremail();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* gameid_;
  ::std::string* usernameoremail_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_SimpleRecoverPasswordArgs_2eproto();
  friend void protobuf_AssignDesc_SimpleRecoverPasswordArgs_2eproto();
  friend void protobuf_ShutdownFile_SimpleRecoverPasswordArgs_2eproto();
  
  void InitAsDefaultInstance();
  static SimpleRecoverPasswordArgs* default_instance_;
};
// ===================================================================


// ===================================================================

// SimpleRecoverPasswordArgs

// optional string GameId = 1;
inline bool SimpleRecoverPasswordArgs::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleRecoverPasswordArgs::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimpleRecoverPasswordArgs::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimpleRecoverPasswordArgs::clear_gameid() {
  if (gameid_ != &::google::protobuf::internal::kEmptyString) {
    gameid_->clear();
  }
  clear_has_gameid();
}
inline const ::std::string& SimpleRecoverPasswordArgs::gameid() const {
  return *gameid_;
}
inline void SimpleRecoverPasswordArgs::set_gameid(const ::std::string& value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void SimpleRecoverPasswordArgs::set_gameid(const char* value) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(value);
}
inline void SimpleRecoverPasswordArgs::set_gameid(const char* value, size_t size) {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  gameid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRecoverPasswordArgs::mutable_gameid() {
  set_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    gameid_ = new ::std::string;
  }
  return gameid_;
}
inline ::std::string* SimpleRecoverPasswordArgs::release_gameid() {
  clear_has_gameid();
  if (gameid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gameid_;
    gameid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string UsernameOrEmail = 2;
inline bool SimpleRecoverPasswordArgs::has_usernameoremail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleRecoverPasswordArgs::set_has_usernameoremail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimpleRecoverPasswordArgs::clear_has_usernameoremail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimpleRecoverPasswordArgs::clear_usernameoremail() {
  if (usernameoremail_ != &::google::protobuf::internal::kEmptyString) {
    usernameoremail_->clear();
  }
  clear_has_usernameoremail();
}
inline const ::std::string& SimpleRecoverPasswordArgs::usernameoremail() const {
  return *usernameoremail_;
}
inline void SimpleRecoverPasswordArgs::set_usernameoremail(const ::std::string& value) {
  set_has_usernameoremail();
  if (usernameoremail_ == &::google::protobuf::internal::kEmptyString) {
    usernameoremail_ = new ::std::string;
  }
  usernameoremail_->assign(value);
}
inline void SimpleRecoverPasswordArgs::set_usernameoremail(const char* value) {
  set_has_usernameoremail();
  if (usernameoremail_ == &::google::protobuf::internal::kEmptyString) {
    usernameoremail_ = new ::std::string;
  }
  usernameoremail_->assign(value);
}
inline void SimpleRecoverPasswordArgs::set_usernameoremail(const char* value, size_t size) {
  set_has_usernameoremail();
  if (usernameoremail_ == &::google::protobuf::internal::kEmptyString) {
    usernameoremail_ = new ::std::string;
  }
  usernameoremail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimpleRecoverPasswordArgs::mutable_usernameoremail() {
  set_has_usernameoremail();
  if (usernameoremail_ == &::google::protobuf::internal::kEmptyString) {
    usernameoremail_ = new ::std::string;
  }
  return usernameoremail_;
}
inline ::std::string* SimpleRecoverPasswordArgs::release_usernameoremail() {
  clear_has_usernameoremail();
  if (usernameoremail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = usernameoremail_;
    usernameoremail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SimpleRecoverPasswordArgs_2eproto__INCLUDED
