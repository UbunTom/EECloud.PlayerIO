// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DbObjValue.proto

#ifndef PROTOBUF_DbObjValue_2eproto__INCLUDED
#define PROTOBUF_DbObjValue_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DbObjValue_2eproto();
void protobuf_AssignDesc_DbObjValue_2eproto();
void protobuf_ShutdownFile_DbObjValue_2eproto();

class DbObjValue;

enum DbObjValue_DbObjType {
  DbObjValue_DbObjType_String = 1,
  DbObjValue_DbObjType_Int = 2,
  DbObjValue_DbObjType_UInt = 3,
  DbObjValue_DbObjType_Long = 4,
  DbObjValue_DbObjType_Bool = 5,
  DbObjValue_DbObjType_Float = 6,
  DbObjValue_DbObjType_Double = 7,
  DbObjValue_DbObjType_ByteArray = 8,
  DbObjValue_DbObjType_DateTime = 9,
  DbObjValue_DbObjType_Array = 10,
  DbObjValue_DbObjType_Obj = 11
};
bool DbObjValue_DbObjType_IsValid(int value);
const DbObjValue_DbObjType DbObjValue_DbObjType_DbObjType_MIN = DbObjValue_DbObjType_String;
const DbObjValue_DbObjType DbObjValue_DbObjType_DbObjType_MAX = DbObjValue_DbObjType_Obj;
const int DbObjValue_DbObjType_DbObjType_ARRAYSIZE = DbObjValue_DbObjType_DbObjType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DbObjValue_DbObjType_descriptor();
inline const ::std::string& DbObjValue_DbObjType_Name(DbObjValue_DbObjType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DbObjValue_DbObjType_descriptor(), value);
}
inline bool DbObjValue_DbObjType_Parse(
    const ::std::string& name, DbObjValue_DbObjType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DbObjValue_DbObjType>(
    DbObjValue_DbObjType_descriptor(), name, value);
}
// ===================================================================

class DbObjValue : public ::google::protobuf::Message {
 public:
  DbObjValue();
  virtual ~DbObjValue();
  
  DbObjValue(const DbObjValue& from);
  
  inline DbObjValue& operator=(const DbObjValue& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DbObjValue& default_instance();
  
  void Swap(DbObjValue* other);
  
  // implements Message ----------------------------------------------
  
  DbObjValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DbObjValue& from);
  void MergeFrom(const DbObjValue& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef DbObjValue_DbObjType DbObjType;
  static const DbObjType String = DbObjValue_DbObjType_String;
  static const DbObjType Int = DbObjValue_DbObjType_Int;
  static const DbObjType UInt = DbObjValue_DbObjType_UInt;
  static const DbObjType Long = DbObjValue_DbObjType_Long;
  static const DbObjType Bool = DbObjValue_DbObjType_Bool;
  static const DbObjType Float = DbObjValue_DbObjType_Float;
  static const DbObjType Double = DbObjValue_DbObjType_Double;
  static const DbObjType ByteArray = DbObjValue_DbObjType_ByteArray;
  static const DbObjType DateTime = DbObjValue_DbObjType_DateTime;
  static const DbObjType Array = DbObjValue_DbObjType_Array;
  static const DbObjType Obj = DbObjValue_DbObjType_Obj;
  static inline bool DbObjType_IsValid(int value) {
    return DbObjValue_DbObjType_IsValid(value);
  }
  static const DbObjType DbObjType_MIN =
    DbObjValue_DbObjType_DbObjType_MIN;
  static const DbObjType DbObjType_MAX =
    DbObjValue_DbObjType_DbObjType_MAX;
  static const int DbObjType_ARRAYSIZE =
    DbObjValue_DbObjType_DbObjType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DbObjType_descriptor() {
    return DbObjValue_DbObjType_descriptor();
  }
  static inline const ::std::string& DbObjType_Name(DbObjType value) {
    return DbObjValue_DbObjType_Name(value);
  }
  static inline bool DbObjType_Parse(const ::std::string& name,
      DbObjType* value) {
    return DbObjValue_DbObjType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .EECloud.DbObjValue.DbObjType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::EECloud::DbObjValue_DbObjType type() const;
  inline void set_type(::EECloud::DbObjValue_DbObjType value);
  
  // optional string ValueString = 2;
  inline bool has_valuestring() const;
  inline void clear_valuestring();
  static const int kValueStringFieldNumber = 2;
  inline const ::std::string& valuestring() const;
  inline void set_valuestring(const ::std::string& value);
  inline void set_valuestring(const char* value);
  inline void set_valuestring(const char* value, size_t size);
  inline ::std::string* mutable_valuestring();
  inline ::std::string* release_valuestring();
  
  // optional sint32 ValueInteger = 3;
  inline bool has_valueinteger() const;
  inline void clear_valueinteger();
  static const int kValueIntegerFieldNumber = 3;
  inline ::google::protobuf::int32 valueinteger() const;
  inline void set_valueinteger(::google::protobuf::int32 value);
  
  // optional uint32 ValueUInteger = 4;
  inline bool has_valueuinteger() const;
  inline void clear_valueuinteger();
  static const int kValueUIntegerFieldNumber = 4;
  inline ::google::protobuf::uint32 valueuinteger() const;
  inline void set_valueuinteger(::google::protobuf::uint32 value);
  
  // optional sint64 ValueLong = 5;
  inline bool has_valuelong() const;
  inline void clear_valuelong();
  static const int kValueLongFieldNumber = 5;
  inline ::google::protobuf::int64 valuelong() const;
  inline void set_valuelong(::google::protobuf::int64 value);
  
  // optional bool ValueBoolean = 6;
  inline bool has_valueboolean() const;
  inline void clear_valueboolean();
  static const int kValueBooleanFieldNumber = 6;
  inline bool valueboolean() const;
  inline void set_valueboolean(bool value);
  
  // optional float ValueFloat = 7;
  inline bool has_valuefloat() const;
  inline void clear_valuefloat();
  static const int kValueFloatFieldNumber = 7;
  inline float valuefloat() const;
  inline void set_valuefloat(float value);
  
  // optional double ValueDouble = 8;
  inline bool has_valuedouble() const;
  inline void clear_valuedouble();
  static const int kValueDoubleFieldNumber = 8;
  inline double valuedouble() const;
  inline void set_valuedouble(double value);
  
  // optional bytes ValueByteArray = 9;
  inline bool has_valuebytearray() const;
  inline void clear_valuebytearray();
  static const int kValueByteArrayFieldNumber = 9;
  inline const ::std::string& valuebytearray() const;
  inline void set_valuebytearray(const ::std::string& value);
  inline void set_valuebytearray(const char* value);
  inline void set_valuebytearray(const void* value, size_t size);
  inline ::std::string* mutable_valuebytearray();
  inline ::std::string* release_valuebytearray();
  
  // optional uint64 ValueDateTime = 10;
  inline bool has_valuedatetime() const;
  inline void clear_valuedatetime();
  static const int kValueDateTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 valuedatetime() const;
  inline void set_valuedatetime(::google::protobuf::uint64 value);
  
  // optional .EECloud.DbObjValue ValueObject = 12;
  inline bool has_valueobject() const;
  inline void clear_valueobject();
  static const int kValueObjectFieldNumber = 12;
  inline const ::EECloud::DbObjValue& valueobject() const;
  inline ::EECloud::DbObjValue* mutable_valueobject();
  inline ::EECloud::DbObjValue* release_valueobject();
  
  // @@protoc_insertion_point(class_scope:EECloud.DbObjValue)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_valuestring();
  inline void clear_has_valuestring();
  inline void set_has_valueinteger();
  inline void clear_has_valueinteger();
  inline void set_has_valueuinteger();
  inline void clear_has_valueuinteger();
  inline void set_has_valuelong();
  inline void clear_has_valuelong();
  inline void set_has_valueboolean();
  inline void clear_has_valueboolean();
  inline void set_has_valuefloat();
  inline void clear_has_valuefloat();
  inline void set_has_valuedouble();
  inline void clear_has_valuedouble();
  inline void set_has_valuebytearray();
  inline void clear_has_valuebytearray();
  inline void set_has_valuedatetime();
  inline void clear_has_valuedatetime();
  inline void set_has_valueobject();
  inline void clear_has_valueobject();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* valuestring_;
  int type_;
  ::google::protobuf::int32 valueinteger_;
  ::google::protobuf::int64 valuelong_;
  ::google::protobuf::uint32 valueuinteger_;
  bool valueboolean_;
  double valuedouble_;
  ::std::string* valuebytearray_;
  ::google::protobuf::uint64 valuedatetime_;
  ::EECloud::DbObjValue* valueobject_;
  float valuefloat_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_DbObjValue_2eproto();
  friend void protobuf_AssignDesc_DbObjValue_2eproto();
  friend void protobuf_ShutdownFile_DbObjValue_2eproto();
  
  void InitAsDefaultInstance();
  static DbObjValue* default_instance_;
};
// ===================================================================


// ===================================================================

// DbObjValue

// optional .EECloud.DbObjValue.DbObjType Type = 1;
inline bool DbObjValue::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DbObjValue::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DbObjValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DbObjValue::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::EECloud::DbObjValue_DbObjType DbObjValue::type() const {
  return static_cast< ::EECloud::DbObjValue_DbObjType >(type_);
}
inline void DbObjValue::set_type(::EECloud::DbObjValue_DbObjType value) {
  GOOGLE_DCHECK(::EECloud::DbObjValue_DbObjType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string ValueString = 2;
inline bool DbObjValue::has_valuestring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DbObjValue::set_has_valuestring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DbObjValue::clear_has_valuestring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DbObjValue::clear_valuestring() {
  if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
    valuestring_->clear();
  }
  clear_has_valuestring();
}
inline const ::std::string& DbObjValue::valuestring() const {
  return *valuestring_;
}
inline void DbObjValue::set_valuestring(const ::std::string& value) {
  set_has_valuestring();
  if (valuestring_ == &::google::protobuf::internal::kEmptyString) {
    valuestring_ = new ::std::string;
  }
  valuestring_->assign(value);
}
inline void DbObjValue::set_valuestring(const char* value) {
  set_has_valuestring();
  if (valuestring_ == &::google::protobuf::internal::kEmptyString) {
    valuestring_ = new ::std::string;
  }
  valuestring_->assign(value);
}
inline void DbObjValue::set_valuestring(const char* value, size_t size) {
  set_has_valuestring();
  if (valuestring_ == &::google::protobuf::internal::kEmptyString) {
    valuestring_ = new ::std::string;
  }
  valuestring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DbObjValue::mutable_valuestring() {
  set_has_valuestring();
  if (valuestring_ == &::google::protobuf::internal::kEmptyString) {
    valuestring_ = new ::std::string;
  }
  return valuestring_;
}
inline ::std::string* DbObjValue::release_valuestring() {
  clear_has_valuestring();
  if (valuestring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = valuestring_;
    valuestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional sint32 ValueInteger = 3;
inline bool DbObjValue::has_valueinteger() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DbObjValue::set_has_valueinteger() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DbObjValue::clear_has_valueinteger() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DbObjValue::clear_valueinteger() {
  valueinteger_ = 0;
  clear_has_valueinteger();
}
inline ::google::protobuf::int32 DbObjValue::valueinteger() const {
  return valueinteger_;
}
inline void DbObjValue::set_valueinteger(::google::protobuf::int32 value) {
  set_has_valueinteger();
  valueinteger_ = value;
}

// optional uint32 ValueUInteger = 4;
inline bool DbObjValue::has_valueuinteger() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DbObjValue::set_has_valueuinteger() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DbObjValue::clear_has_valueuinteger() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DbObjValue::clear_valueuinteger() {
  valueuinteger_ = 0u;
  clear_has_valueuinteger();
}
inline ::google::protobuf::uint32 DbObjValue::valueuinteger() const {
  return valueuinteger_;
}
inline void DbObjValue::set_valueuinteger(::google::protobuf::uint32 value) {
  set_has_valueuinteger();
  valueuinteger_ = value;
}

// optional sint64 ValueLong = 5;
inline bool DbObjValue::has_valuelong() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DbObjValue::set_has_valuelong() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DbObjValue::clear_has_valuelong() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DbObjValue::clear_valuelong() {
  valuelong_ = GOOGLE_LONGLONG(0);
  clear_has_valuelong();
}
inline ::google::protobuf::int64 DbObjValue::valuelong() const {
  return valuelong_;
}
inline void DbObjValue::set_valuelong(::google::protobuf::int64 value) {
  set_has_valuelong();
  valuelong_ = value;
}

// optional bool ValueBoolean = 6;
inline bool DbObjValue::has_valueboolean() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DbObjValue::set_has_valueboolean() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DbObjValue::clear_has_valueboolean() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DbObjValue::clear_valueboolean() {
  valueboolean_ = false;
  clear_has_valueboolean();
}
inline bool DbObjValue::valueboolean() const {
  return valueboolean_;
}
inline void DbObjValue::set_valueboolean(bool value) {
  set_has_valueboolean();
  valueboolean_ = value;
}

// optional float ValueFloat = 7;
inline bool DbObjValue::has_valuefloat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DbObjValue::set_has_valuefloat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DbObjValue::clear_has_valuefloat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DbObjValue::clear_valuefloat() {
  valuefloat_ = 0;
  clear_has_valuefloat();
}
inline float DbObjValue::valuefloat() const {
  return valuefloat_;
}
inline void DbObjValue::set_valuefloat(float value) {
  set_has_valuefloat();
  valuefloat_ = value;
}

// optional double ValueDouble = 8;
inline bool DbObjValue::has_valuedouble() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DbObjValue::set_has_valuedouble() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DbObjValue::clear_has_valuedouble() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DbObjValue::clear_valuedouble() {
  valuedouble_ = 0;
  clear_has_valuedouble();
}
inline double DbObjValue::valuedouble() const {
  return valuedouble_;
}
inline void DbObjValue::set_valuedouble(double value) {
  set_has_valuedouble();
  valuedouble_ = value;
}

// optional bytes ValueByteArray = 9;
inline bool DbObjValue::has_valuebytearray() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DbObjValue::set_has_valuebytearray() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DbObjValue::clear_has_valuebytearray() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DbObjValue::clear_valuebytearray() {
  if (valuebytearray_ != &::google::protobuf::internal::kEmptyString) {
    valuebytearray_->clear();
  }
  clear_has_valuebytearray();
}
inline const ::std::string& DbObjValue::valuebytearray() const {
  return *valuebytearray_;
}
inline void DbObjValue::set_valuebytearray(const ::std::string& value) {
  set_has_valuebytearray();
  if (valuebytearray_ == &::google::protobuf::internal::kEmptyString) {
    valuebytearray_ = new ::std::string;
  }
  valuebytearray_->assign(value);
}
inline void DbObjValue::set_valuebytearray(const char* value) {
  set_has_valuebytearray();
  if (valuebytearray_ == &::google::protobuf::internal::kEmptyString) {
    valuebytearray_ = new ::std::string;
  }
  valuebytearray_->assign(value);
}
inline void DbObjValue::set_valuebytearray(const void* value, size_t size) {
  set_has_valuebytearray();
  if (valuebytearray_ == &::google::protobuf::internal::kEmptyString) {
    valuebytearray_ = new ::std::string;
  }
  valuebytearray_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DbObjValue::mutable_valuebytearray() {
  set_has_valuebytearray();
  if (valuebytearray_ == &::google::protobuf::internal::kEmptyString) {
    valuebytearray_ = new ::std::string;
  }
  return valuebytearray_;
}
inline ::std::string* DbObjValue::release_valuebytearray() {
  clear_has_valuebytearray();
  if (valuebytearray_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = valuebytearray_;
    valuebytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 ValueDateTime = 10;
inline bool DbObjValue::has_valuedatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DbObjValue::set_has_valuedatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DbObjValue::clear_has_valuedatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DbObjValue::clear_valuedatetime() {
  valuedatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_valuedatetime();
}
inline ::google::protobuf::uint64 DbObjValue::valuedatetime() const {
  return valuedatetime_;
}
inline void DbObjValue::set_valuedatetime(::google::protobuf::uint64 value) {
  set_has_valuedatetime();
  valuedatetime_ = value;
}

// optional .EECloud.DbObjValue ValueObject = 12;
inline bool DbObjValue::has_valueobject() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DbObjValue::set_has_valueobject() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DbObjValue::clear_has_valueobject() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DbObjValue::clear_valueobject() {
  if (valueobject_ != NULL) valueobject_->::EECloud::DbObjValue::Clear();
  clear_has_valueobject();
}
inline const ::EECloud::DbObjValue& DbObjValue::valueobject() const {
  return valueobject_ != NULL ? *valueobject_ : *default_instance_->valueobject_;
}
inline ::EECloud::DbObjValue* DbObjValue::mutable_valueobject() {
  set_has_valueobject();
  if (valueobject_ == NULL) valueobject_ = new ::EECloud::DbObjValue;
  return valueobject_;
}
inline ::EECloud::DbObjValue* DbObjValue::release_valueobject() {
  clear_has_valueobject();
  ::EECloud::DbObjValue* temp = valueobject_;
  valueobject_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EECloud::DbObjValue_DbObjType>() {
  return ::EECloud::DbObjValue_DbObjType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DbObjValue_2eproto__INCLUDED
