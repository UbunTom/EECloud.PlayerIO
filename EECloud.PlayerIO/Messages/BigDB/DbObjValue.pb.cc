// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DbObjValue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* DbObjValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbObjValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DbObjValue_DbObjType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_DbObjValue_2eproto() {
  protobuf_AddDesc_DbObjValue_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DbObjValue.proto");
  GOOGLE_CHECK(file != NULL);
  DbObjValue_descriptor_ = file->message_type(0);
  static const int DbObjValue_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valuestring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valueinteger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valueuinteger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valuelong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valueboolean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valuefloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valuedouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valuebytearray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valuedatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, valueobject_),
  };
  DbObjValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbObjValue_descriptor_,
      DbObjValue::default_instance_,
      DbObjValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbObjValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbObjValue));
  DbObjValue_DbObjType_descriptor_ = DbObjValue_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DbObjValue_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbObjValue_descriptor_, &DbObjValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DbObjValue_2eproto() {
  delete DbObjValue::default_instance_;
  delete DbObjValue_reflection_;
}

void protobuf_AddDesc_DbObjValue_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DbObjValue.proto\022\007EECloud\"\257\003\n\nDbObjVal"
    "ue\022+\n\004Type\030\001 \001(\0162\035.EECloud.DbObjValue.Db"
    "ObjType\022\023\n\013ValueString\030\002 \001(\t\022\024\n\014ValueInt"
    "eger\030\003 \001(\021\022\025\n\rValueUInteger\030\004 \001(\r\022\021\n\tVal"
    "ueLong\030\005 \001(\022\022\024\n\014ValueBoolean\030\006 \001(\010\022\022\n\nVa"
    "lueFloat\030\007 \001(\002\022\023\n\013ValueDouble\030\010 \001(\001\022\026\n\016V"
    "alueByteArray\030\t \001(\014\022\025\n\rValueDateTime\030\n \001"
    "(\004\022(\n\013ValueObject\030\014 \001(\0132\023.EECloud.DbObjV"
    "alue\"\206\001\n\tDbObjType\022\n\n\006String\020\001\022\007\n\003Int\020\002\022"
    "\010\n\004UInt\020\003\022\010\n\004Long\020\004\022\010\n\004Bool\020\005\022\t\n\005Float\020\006"
    "\022\n\n\006Double\020\007\022\r\n\tByteArray\020\010\022\014\n\010DateTime\020"
    "\t\022\t\n\005Array\020\n\022\007\n\003Obj\020\013", 461);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DbObjValue.proto", &protobuf_RegisterTypes);
  DbObjValue::default_instance_ = new DbObjValue();
  DbObjValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DbObjValue_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DbObjValue_2eproto {
  StaticDescriptorInitializer_DbObjValue_2eproto() {
    protobuf_AddDesc_DbObjValue_2eproto();
  }
} static_descriptor_initializer_DbObjValue_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* DbObjValue_DbObjType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbObjValue_DbObjType_descriptor_;
}
bool DbObjValue_DbObjType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DbObjValue_DbObjType DbObjValue::String;
const DbObjValue_DbObjType DbObjValue::Int;
const DbObjValue_DbObjType DbObjValue::UInt;
const DbObjValue_DbObjType DbObjValue::Long;
const DbObjValue_DbObjType DbObjValue::Bool;
const DbObjValue_DbObjType DbObjValue::Float;
const DbObjValue_DbObjType DbObjValue::Double;
const DbObjValue_DbObjType DbObjValue::ByteArray;
const DbObjValue_DbObjType DbObjValue::DateTime;
const DbObjValue_DbObjType DbObjValue::Array;
const DbObjValue_DbObjType DbObjValue::Obj;
const DbObjValue_DbObjType DbObjValue::DbObjType_MIN;
const DbObjValue_DbObjType DbObjValue::DbObjType_MAX;
const int DbObjValue::DbObjType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DbObjValue::kTypeFieldNumber;
const int DbObjValue::kValueStringFieldNumber;
const int DbObjValue::kValueIntegerFieldNumber;
const int DbObjValue::kValueUIntegerFieldNumber;
const int DbObjValue::kValueLongFieldNumber;
const int DbObjValue::kValueBooleanFieldNumber;
const int DbObjValue::kValueFloatFieldNumber;
const int DbObjValue::kValueDoubleFieldNumber;
const int DbObjValue::kValueByteArrayFieldNumber;
const int DbObjValue::kValueDateTimeFieldNumber;
const int DbObjValue::kValueObjectFieldNumber;
#endif  // !_MSC_VER

DbObjValue::DbObjValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DbObjValue::InitAsDefaultInstance() {
  valueobject_ = const_cast< ::EECloud::DbObjValue*>(&::EECloud::DbObjValue::default_instance());
}

DbObjValue::DbObjValue(const DbObjValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DbObjValue::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  valuestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valueinteger_ = 0;
  valueuinteger_ = 0u;
  valuelong_ = GOOGLE_LONGLONG(0);
  valueboolean_ = false;
  valuefloat_ = 0;
  valuedouble_ = 0;
  valuebytearray_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  valuedatetime_ = GOOGLE_ULONGLONG(0);
  valueobject_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbObjValue::~DbObjValue() {
  SharedDtor();
}

void DbObjValue::SharedDtor() {
  if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
    delete valuestring_;
  }
  if (valuebytearray_ != &::google::protobuf::internal::kEmptyString) {
    delete valuebytearray_;
  }
  if (this != default_instance_) {
    delete valueobject_;
  }
}

void DbObjValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbObjValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbObjValue_descriptor_;
}

const DbObjValue& DbObjValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DbObjValue_2eproto();  return *default_instance_;
}

DbObjValue* DbObjValue::default_instance_ = NULL;

DbObjValue* DbObjValue::New() const {
  return new DbObjValue;
}

void DbObjValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_valuestring()) {
      if (valuestring_ != &::google::protobuf::internal::kEmptyString) {
        valuestring_->clear();
      }
    }
    valueinteger_ = 0;
    valueuinteger_ = 0u;
    valuelong_ = GOOGLE_LONGLONG(0);
    valueboolean_ = false;
    valuefloat_ = 0;
    valuedouble_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_valuebytearray()) {
      if (valuebytearray_ != &::google::protobuf::internal::kEmptyString) {
        valuebytearray_->clear();
      }
    }
    valuedatetime_ = GOOGLE_ULONGLONG(0);
    if (has_valueobject()) {
      if (valueobject_ != NULL) valueobject_->::EECloud::DbObjValue::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbObjValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EECloud.DbObjValue.DbObjType Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::EECloud::DbObjValue_DbObjType_IsValid(value)) {
            set_type(static_cast< ::EECloud::DbObjValue_DbObjType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ValueString;
        break;
      }
      
      // optional string ValueString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ValueString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_valuestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->valuestring().data(), this->valuestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ValueInteger;
        break;
      }
      
      // optional sint32 ValueInteger = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueInteger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &valueinteger_)));
          set_has_valueinteger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ValueUInteger;
        break;
      }
      
      // optional uint32 ValueUInteger = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueUInteger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &valueuinteger_)));
          set_has_valueuinteger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ValueLong;
        break;
      }
      
      // optional sint64 ValueLong = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueLong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &valuelong_)));
          set_has_valuelong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ValueBoolean;
        break;
      }
      
      // optional bool ValueBoolean = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueBoolean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valueboolean_)));
          set_has_valueboolean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_ValueFloat;
        break;
      }
      
      // optional float ValueFloat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ValueFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &valuefloat_)));
          set_has_valuefloat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_ValueDouble;
        break;
      }
      
      // optional double ValueDouble = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ValueDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &valuedouble_)));
          set_has_valuedouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ValueByteArray;
        break;
      }
      
      // optional bytes ValueByteArray = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ValueByteArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_valuebytearray()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ValueDateTime;
        break;
      }
      
      // optional uint64 ValueDateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValueDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &valuedatetime_)));
          set_has_valuedatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ValueObject;
        break;
      }
      
      // optional .EECloud.DbObjValue ValueObject = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ValueObject:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valueobject()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DbObjValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EECloud.DbObjValue.DbObjType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional string ValueString = 2;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->valuestring(), output);
  }
  
  // optional sint32 ValueInteger = 3;
  if (has_valueinteger()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->valueinteger(), output);
  }
  
  // optional uint32 ValueUInteger = 4;
  if (has_valueuinteger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->valueuinteger(), output);
  }
  
  // optional sint64 ValueLong = 5;
  if (has_valuelong()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(5, this->valuelong(), output);
  }
  
  // optional bool ValueBoolean = 6;
  if (has_valueboolean()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->valueboolean(), output);
  }
  
  // optional float ValueFloat = 7;
  if (has_valuefloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->valuefloat(), output);
  }
  
  // optional double ValueDouble = 8;
  if (has_valuedouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->valuedouble(), output);
  }
  
  // optional bytes ValueByteArray = 9;
  if (has_valuebytearray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->valuebytearray(), output);
  }
  
  // optional uint64 ValueDateTime = 10;
  if (has_valuedatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->valuedatetime(), output);
  }
  
  // optional .EECloud.DbObjValue ValueObject = 12;
  if (has_valueobject()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->valueobject(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DbObjValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EECloud.DbObjValue.DbObjType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional string ValueString = 2;
  if (has_valuestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->valuestring().data(), this->valuestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->valuestring(), target);
  }
  
  // optional sint32 ValueInteger = 3;
  if (has_valueinteger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->valueinteger(), target);
  }
  
  // optional uint32 ValueUInteger = 4;
  if (has_valueuinteger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->valueuinteger(), target);
  }
  
  // optional sint64 ValueLong = 5;
  if (has_valuelong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(5, this->valuelong(), target);
  }
  
  // optional bool ValueBoolean = 6;
  if (has_valueboolean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->valueboolean(), target);
  }
  
  // optional float ValueFloat = 7;
  if (has_valuefloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->valuefloat(), target);
  }
  
  // optional double ValueDouble = 8;
  if (has_valuedouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->valuedouble(), target);
  }
  
  // optional bytes ValueByteArray = 9;
  if (has_valuebytearray()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->valuebytearray(), target);
  }
  
  // optional uint64 ValueDateTime = 10;
  if (has_valuedatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->valuedatetime(), target);
  }
  
  // optional .EECloud.DbObjValue ValueObject = 12;
  if (has_valueobject()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->valueobject(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DbObjValue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EECloud.DbObjValue.DbObjType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string ValueString = 2;
    if (has_valuestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->valuestring());
    }
    
    // optional sint32 ValueInteger = 3;
    if (has_valueinteger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->valueinteger());
    }
    
    // optional uint32 ValueUInteger = 4;
    if (has_valueuinteger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->valueuinteger());
    }
    
    // optional sint64 ValueLong = 5;
    if (has_valuelong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->valuelong());
    }
    
    // optional bool ValueBoolean = 6;
    if (has_valueboolean()) {
      total_size += 1 + 1;
    }
    
    // optional float ValueFloat = 7;
    if (has_valuefloat()) {
      total_size += 1 + 4;
    }
    
    // optional double ValueDouble = 8;
    if (has_valuedouble()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes ValueByteArray = 9;
    if (has_valuebytearray()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->valuebytearray());
    }
    
    // optional uint64 ValueDateTime = 10;
    if (has_valuedatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->valuedatetime());
    }
    
    // optional .EECloud.DbObjValue ValueObject = 12;
    if (has_valueobject()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valueobject());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbObjValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbObjValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbObjValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbObjValue::MergeFrom(const DbObjValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuestring()) {
      set_valuestring(from.valuestring());
    }
    if (from.has_valueinteger()) {
      set_valueinteger(from.valueinteger());
    }
    if (from.has_valueuinteger()) {
      set_valueuinteger(from.valueuinteger());
    }
    if (from.has_valuelong()) {
      set_valuelong(from.valuelong());
    }
    if (from.has_valueboolean()) {
      set_valueboolean(from.valueboolean());
    }
    if (from.has_valuefloat()) {
      set_valuefloat(from.valuefloat());
    }
    if (from.has_valuedouble()) {
      set_valuedouble(from.valuedouble());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_valuebytearray()) {
      set_valuebytearray(from.valuebytearray());
    }
    if (from.has_valuedatetime()) {
      set_valuedatetime(from.valuedatetime());
    }
    if (from.has_valueobject()) {
      mutable_valueobject()->::EECloud::DbObjValue::MergeFrom(from.valueobject());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbObjValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbObjValue::CopyFrom(const DbObjValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbObjValue::IsInitialized() const {
  
  return true;
}

void DbObjValue::Swap(DbObjValue* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(valuestring_, other->valuestring_);
    std::swap(valueinteger_, other->valueinteger_);
    std::swap(valueuinteger_, other->valueuinteger_);
    std::swap(valuelong_, other->valuelong_);
    std::swap(valueboolean_, other->valueboolean_);
    std::swap(valuefloat_, other->valuefloat_);
    std::swap(valuedouble_, other->valuedouble_);
    std::swap(valuebytearray_, other->valuebytearray_);
    std::swap(valuedatetime_, other->valuedatetime_);
    std::swap(valueobject_, other->valueobject_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbObjValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbObjValue_descriptor_;
  metadata.reflection = DbObjValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
