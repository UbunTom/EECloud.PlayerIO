// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RegistrationError.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace EECloud {

namespace {

const ::google::protobuf::Descriptor* RegistrationError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistrationError_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RegistrationError_2eproto() {
  protobuf_AddDesc_RegistrationError_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RegistrationError.proto");
  GOOGLE_CHECK(file != NULL);
  RegistrationError_descriptor_ = file->message_type(0);
  static const int RegistrationError_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, usernameerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, passworderror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, emailerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, captchaerror_),
  };
  RegistrationError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistrationError_descriptor_,
      RegistrationError::default_instance_,
      RegistrationError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistrationError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistrationError));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RegistrationError_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistrationError_descriptor_, &RegistrationError::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RegistrationError_2eproto() {
  delete RegistrationError::default_instance_;
  delete RegistrationError_reflection_;
}

void protobuf_AddDesc_RegistrationError_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027RegistrationError.proto\022\007EECloud\"\217\001\n\021R"
    "egistrationError\022\021\n\tErrorCode\030\001 \001(\005\022\017\n\007M"
    "essage\030\002 \001(\t\022\025\n\rUsernameError\030\003 \001(\t\022\025\n\rP"
    "asswordError\030\004 \001(\t\022\022\n\nEmailError\030\005 \001(\t\022\024"
    "\n\014CaptchaError\030\006 \001(\t", 180);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RegistrationError.proto", &protobuf_RegisterTypes);
  RegistrationError::default_instance_ = new RegistrationError();
  RegistrationError::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RegistrationError_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RegistrationError_2eproto {
  StaticDescriptorInitializer_RegistrationError_2eproto() {
    protobuf_AddDesc_RegistrationError_2eproto();
  }
} static_descriptor_initializer_RegistrationError_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RegistrationError::kErrorCodeFieldNumber;
const int RegistrationError::kMessageFieldNumber;
const int RegistrationError::kUsernameErrorFieldNumber;
const int RegistrationError::kPasswordErrorFieldNumber;
const int RegistrationError::kEmailErrorFieldNumber;
const int RegistrationError::kCaptchaErrorFieldNumber;
#endif  // !_MSC_VER

RegistrationError::RegistrationError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegistrationError::InitAsDefaultInstance() {
}

RegistrationError::RegistrationError(const RegistrationError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegistrationError::SharedCtor() {
  _cached_size_ = 0;
  errorcode_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usernameerror_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passworderror_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  emailerror_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  captchaerror_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistrationError::~RegistrationError() {
  SharedDtor();
}

void RegistrationError::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (usernameerror_ != &::google::protobuf::internal::kEmptyString) {
    delete usernameerror_;
  }
  if (passworderror_ != &::google::protobuf::internal::kEmptyString) {
    delete passworderror_;
  }
  if (emailerror_ != &::google::protobuf::internal::kEmptyString) {
    delete emailerror_;
  }
  if (captchaerror_ != &::google::protobuf::internal::kEmptyString) {
    delete captchaerror_;
  }
  if (this != default_instance_) {
  }
}

void RegistrationError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistrationError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistrationError_descriptor_;
}

const RegistrationError& RegistrationError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RegistrationError_2eproto();  return *default_instance_;
}

RegistrationError* RegistrationError::default_instance_ = NULL;

RegistrationError* RegistrationError::New() const {
  return new RegistrationError;
}

void RegistrationError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errorcode_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_usernameerror()) {
      if (usernameerror_ != &::google::protobuf::internal::kEmptyString) {
        usernameerror_->clear();
      }
    }
    if (has_passworderror()) {
      if (passworderror_ != &::google::protobuf::internal::kEmptyString) {
        passworderror_->clear();
      }
    }
    if (has_emailerror()) {
      if (emailerror_ != &::google::protobuf::internal::kEmptyString) {
        emailerror_->clear();
      }
    }
    if (has_captchaerror()) {
      if (captchaerror_ != &::google::protobuf::internal::kEmptyString) {
        captchaerror_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistrationError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Message;
        break;
      }
      
      // optional string Message = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UsernameError;
        break;
      }
      
      // optional string UsernameError = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UsernameError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usernameerror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->usernameerror().data(), this->usernameerror().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PasswordError;
        break;
      }
      
      // optional string PasswordError = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PasswordError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passworderror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passworderror().data(), this->passworderror().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EmailError;
        break;
      }
      
      // optional string EmailError = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EmailError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailerror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->emailerror().data(), this->emailerror().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CaptchaError;
        break;
      }
      
      // optional string CaptchaError = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CaptchaError:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_captchaerror()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->captchaerror().data(), this->captchaerror().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistrationError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ErrorCode = 1;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->errorcode(), output);
  }
  
  // optional string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->message(), output);
  }
  
  // optional string UsernameError = 3;
  if (has_usernameerror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernameerror().data(), this->usernameerror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->usernameerror(), output);
  }
  
  // optional string PasswordError = 4;
  if (has_passworderror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passworderror().data(), this->passworderror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->passworderror(), output);
  }
  
  // optional string EmailError = 5;
  if (has_emailerror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailerror().data(), this->emailerror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->emailerror(), output);
  }
  
  // optional string CaptchaError = 6;
  if (has_captchaerror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchaerror().data(), this->captchaerror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->captchaerror(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegistrationError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ErrorCode = 1;
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->errorcode(), target);
  }
  
  // optional string Message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }
  
  // optional string UsernameError = 3;
  if (has_usernameerror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->usernameerror().data(), this->usernameerror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->usernameerror(), target);
  }
  
  // optional string PasswordError = 4;
  if (has_passworderror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passworderror().data(), this->passworderror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->passworderror(), target);
  }
  
  // optional string EmailError = 5;
  if (has_emailerror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->emailerror().data(), this->emailerror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->emailerror(), target);
  }
  
  // optional string CaptchaError = 6;
  if (has_captchaerror()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->captchaerror().data(), this->captchaerror().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->captchaerror(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegistrationError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ErrorCode = 1;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorcode());
    }
    
    // optional string Message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // optional string UsernameError = 3;
    if (has_usernameerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->usernameerror());
    }
    
    // optional string PasswordError = 4;
    if (has_passworderror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passworderror());
    }
    
    // optional string EmailError = 5;
    if (has_emailerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emailerror());
    }
    
    // optional string CaptchaError = 6;
    if (has_captchaerror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->captchaerror());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistrationError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistrationError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistrationError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistrationError::MergeFrom(const RegistrationError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_usernameerror()) {
      set_usernameerror(from.usernameerror());
    }
    if (from.has_passworderror()) {
      set_passworderror(from.passworderror());
    }
    if (from.has_emailerror()) {
      set_emailerror(from.emailerror());
    }
    if (from.has_captchaerror()) {
      set_captchaerror(from.captchaerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistrationError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationError::CopyFrom(const RegistrationError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationError::IsInitialized() const {
  
  return true;
}

void RegistrationError::Swap(RegistrationError* other) {
  if (other != this) {
    std::swap(errorcode_, other->errorcode_);
    std::swap(message_, other->message_);
    std::swap(usernameerror_, other->usernameerror_);
    std::swap(passworderror_, other->passworderror_);
    std::swap(emailerror_, other->emailerror_);
    std::swap(captchaerror_, other->captchaerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistrationError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistrationError_descriptor_;
  metadata.reflection = RegistrationError_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace EECloud

// @@protoc_insertion_point(global_scope)
